    // https://leetcode.com/problems/most-frequent-prime/
    

    //    import java.util.Map.Entry;
    //    for(Entry<String, Integer> it:map1.entrySet()){
    //         String s=it.getKey();int i=it.getValue();
    //     }
    



// public boolean isPrime(int n) {
//         if (n == 1) return false;
//         for (int i = 2; i * i <= n; i++) {
//             if (n % i == 0) return false;
//         }
//         return true;
//     }




//  int maxFrequency = 0;
//         int mostFrequentPrime = -1;
//         for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
//             int num = entry.getKey();
//             int frequency = entry.getValue();
//             if (frequency > maxFrequency && primes.contains(num)) {
//                 maxFrequency = frequency;
//                 mostFrequentPrime = num;
//             } else if (frequency == maxFrequency && num > mostFrequentPrime && primes.contains(num)) {
//                 mostFrequentPrime = num;
//             }
//         }



//  List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 1, 2, 1, 4, 5, 1));
//   int frequencyOfTwos = Collections.frequency(numbers, 2);

// int index = Collections.binarySearch(numbers, key);
// Collections.revese()
// Collections.max(map.keySet());
// Collections.max(map.values());
//Collections.swap(ArrList, 1, 2);//swap based on zero indices
//  a.set(1, 2340)/ Replaces the element at the specified position in this list with the specified element.
//Collections.fill(a,-1);//Replaces all of the elements of the specified list with the specified element.

// int[] arr = {1, 2, 3, 4, 5};
// int index = Arrays.binarySearch(arr, 3); // Returns index of 3 if found, otherwise negative value
//  int maxValue = Arrays.stream(arr).max().getAsInt();
//int minValue = Arrays.stream(arr).min().getAsInt();
//int sum = Arrays.stream(arr).sum();

// System.out.println("ankit".contains("kt"));

//    System.err.println(Arrays.deepToString(arr));

// int arr[] = { 2, 2, 3, 5, 6, 7, 8, 9 };
// long count = Arrays.stream(arr).count();//return type are long  and its basically size





//  Stack st=new Stack<>();
//         st.push(st);st.peek();st.pop();st.add(st);
//         Queue q=new LinkedList()<>();
//         q.add(q);q.poll();q.peek();
//         PriorityQueue pq=new PriorityQueue<>();
//         pq.poll();pq.peek();pq.add(pq);







    //Arrays function
//      long arr[]={1,4,5};
//    System.out.println(Arrays.toString(arr));
//    System.out.println(Arrays.stream(arr).min().getAsLong());
//    List<Integer>list=new ArrayList<>(Arrays.asList(2,5,7,9));
//    System.out.println(list);
//   System.out.println( Collections.max(list));
//   System.out.println(Collections.frequency(list,2));



// StringBuilder res = new StringBuilder();
// StringBuilder tmp = new StringBuilder();
// char[] c = tmp.toString().toCharArray();
// Arrays.sort(c);
// tmp = new StringBuilder(new String(c));
// return res.toString();