private void findPaths(Node node, int target, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> path) {
        if (node == null)
            return;

        // Add current node to the path
        path.add(node.data);

        // If the current node is the target, add the path to the result
        if (node.data == target) {
            result.add(new ArrayList<>(path));
            return;//dekho return remove then what  changing checkkkkkkkkkkkkkkkkkkkkKKSDDDDFGBSDKJJJJJJJHGFDAMNBVCXZZX
        }

        // Recur for left and right subtrees
        findPaths(node.left, target, result, path);
        findPaths(node.right, target, result, path);

        // Remove current node from the path
        path.remove(path.size() - 1);
    }

    // Public method to get paths from root to target node
    public ArrayList<ArrayList<Integer>> paths(Node root, int target) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        ArrayList<Integer> path = new ArrayList<>();
        findPaths(root, target, result, path);
        return result;
    }













///////////rooot se target tk ka path TILL TARGET ONLY

ArrayList<Integer> pathFromRootToTarget(Node root, int target) {
    ArrayList<Integer> list = new ArrayList<>();
    if (util(root, target, list))
        return list;
    return new ArrayList<>(); // Return an empty list if target not found.
}

boolean util(Node root, int target, ArrayList<Integer> list) {
    if (root == null) 
        return false;

    list.add(root.data);
    if (root.data == target)
        return true;
    
    // Check in left and right subtrees
    if (util(root.left, target, list) || util(root.right, target, list))
        return true;

    // If the target is not found in this subtree, backtrack.
    list.remove(list.size() - 1);
    return false;
}














///////////rooot se target tk ka path TILL LEAF 
